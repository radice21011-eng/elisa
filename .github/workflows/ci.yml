name: 🚀 ELISA Quantum AI Council - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: elisa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📁 Checkout repository
      uses: actions/checkout@v4

    - name: ⚡ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Type checking
      run: npm run type-check

    - name: 🎨 Linting
      run: npm run lint

    - name: 🗄️ Database setup
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elisa_test
      run: npm run db:push

    - name: 🧪 Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elisa_test
        JWT_SECRET: test-secret-key
        SESSION_SECRET: test-session-secret
      run: npm test

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📁 Checkout repository
      uses: actions/checkout@v4

    - name: ⚡ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build application
      run: npm run build

    - name: 📁 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          package.json
          package-lock.json

  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📁 Checkout repository
      uses: actions/checkout@v4

    - name: ⚡ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🛡️ Run npm audit
      run: npm audit --audit-level high

    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: typescript, javascript

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📁 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          radice21011/elisa-quantum-ai:latest
          radice21011/elisa-quantum-ai:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 📁 Checkout repository
      uses: actions/checkout@v4

    - name: 📁 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    name: 🌍 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📁 Checkout repository
      uses: actions/checkout@v4

    - name: 📁 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: 🌍 Deploy to production
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      run: |
        echo "🌍 Deploying to production environment..."
        # Add your production deployment commands here

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()

    steps:
    - name: 📢 Notify on success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ ELISA Quantum AI Council - CI/CD Pipeline Successful"
        echo "🎉 All tests passed and build completed successfully!"

    - name: ❌ Notify on failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ ELISA Quantum AI Council - CI/CD Pipeline Failed"
        echo "🚨 Please check the logs and fix the issues."